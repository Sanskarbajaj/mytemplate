
#include<bits/stdc++.h>
using namespace std;
 
#define ff              first
#define ss              second
#define int             long long
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());
void c_p_c()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



package com.sanskar.jwtdemo;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Component
public class JwtUtil implements Serializable {

    private static final long serialVersionUID = 234234523523L;

   public static final long JWT_TOKEN_VALIDITY = 5 * 60 * 60;

   private String secretKey="java";

   //retrieve username from jwt token
   public String getUsernameFromToken(String token) {
       return getClaimFromToken(token, Claims::getSubject);
   }

   //retrieve expiration date from jwt token
   public Date getExpirationDateFromToken(String token) {
       return getClaimFromToken(token, Claims::getExpiration);
   }


   public <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
       final Claims claims = getAllClaimsFromToken(token);
       return claimsResolver.apply(claims);
   }


   //for retrieving any information from token we will need the secret key
   private Claims getAllClaimsFromToken(String token) {
       return Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token).getBody();
   }


   //check if the token has expired
   private Boolean isTokenExpired(String token) {
       final Date expiration = getExpirationDateFromToken(token);
       return expiration.before(new Date());
   }


   //generate token for user
   public String generateToken(UserDetails userDetails) {
       Map<String, Object> claims = new HashMap<>();
       return doGenerateToken(claims, userDetails.getUsername());
   }


   //while creating the token -
   //1. Define  claims of the token, like Issuer, Expiration, Subject, and the ID
   //2. Sign the JWT using the HS512 algorithm and secret key.
   private String doGenerateToken(Map<String, Object> claims, String subject) {
       return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))
               .setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000))
               .signWith(SignatureAlgorithm.HS512, secretKey).compact();
   }


   //validate token
   public Boolean validateToken(String token, UserDetails userDetails) {
       final String username = getUsernameFromToken(token);
       return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
   }
}
